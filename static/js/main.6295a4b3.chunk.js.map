{"version":3,"sources":["abi/contract.js","components/Modal.js","config/wallets.js","themes/icon.js","assets/ico_metamask.svg","assets/ico_connectwallet.svg","utils/constant.js","utils/functions.js","components/HistoryTable.js","App.js","index.js"],"names":["getWethContract","provider","web3","Web3","wethContract","eth","Contract","wethABI","getMasterChefContract","masterchefContract","masterChefABI","CustomModal","isModalVisible","handleCancel","title","handleAction","loading","modalInfoName","modalInfoValue","useState","amount","setAmount","handleTransaction","a","footer","cancelButtonProps","visible","onCancel","className","controls","value","size","style","marginBottom","width","onChange","class","type","onClick","injected","InjectedConnector","supportedChainIds","walletConnectConnector","WalletConnectConnector","rpc","bridge","qrcode","icons","metaMask","walletConnect","MASTERCHEF_SC","WETH_SC","EllipsisMiddle","account","slice","HistoryTable","data","history","map","rec","key","id","action","time","console","log","columns","dataIndex","dataSource","headers","App","useWeb3React","activate","library","chainId","loadingButton","setLoadingButton","loadingHarvest","setLoadingHarvest","loadingApprove","setLoadingApprove","stakeModal","setStakeModal","withdrawModal","setWithdrawModal","balance","setBalance","yourStake","setYourStake","tokenEarned","setTokenEarned","totalStaked","setTotalStaked","isApprove","setApprove","historyData","setHistoryData","multicall","Multicall","web3Instance","tryAggregate","fetchHistory","axios","url","method","response","depositHistory","depositEntities","historyResponse","withdrawEntities","sortHistoryByTime","sort","x","y","reverse","find","item","utils","fromWei","moment","unix","format","contractCallContext","reference","contractAddress","abi","calls","methodName","methodParameters","getMulticalData","call","results","ethers","formatEther","BigNumber","from","userBalance","callsReturnContext","returnValues","hex","userStake","connectInjectedConnector","connectWalletConnectConnector","undefined","catch","e","handleCloseStakeModal","handleCloseWithdrawModal","handleOpenStakeModal","handleOpenWithdrawModal","checkAllowance","methods","allowance","isAllowance","handleApprove","parseFloat","message","error","content","duration","approve","toWei","send","handleDeposit","deposit","toString","success","getStaticInfo","handleWithdraw","withdraw","handleHarvest","useEffect","gutter","span","bordered","column","Item","label","block","src","getLibrary","connector","Web3Provider","Web3ProviderNetwork","createWeb3ReactRoot","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6295a4b3.chunk.js","sourcesContent":["import dd2ABI from \"./DD2.json\";\r\nimport masterChefABI from \"./Masterchef.json\";\r\nimport wethABI from \"./WETH.json\";\r\nimport Web3 from \"web3\";\r\n\r\nexport const getWethContract = (provider) => {\r\n  const web3 = new Web3(provider);\r\n  const wethContract = new web3.eth.Contract(\r\n    wethABI,\r\n    \"0xc778417e063141139fce010982780140aa0cd5ab\"\r\n  );\r\n  return { web3, wethContract };\r\n};\r\n\r\nexport const getDD2Contract = (provider) => {\r\n  const web3 = new Web3(provider);\r\n  const dd2Contract = new web3.eth.Contract(\r\n    dd2ABI,\r\n    \"0xb1745657cb84c370dd0db200a626d06b28cc5872\"\r\n  );\r\n  return { web3, dd2Contract };\r\n};\r\n\r\nexport const getMasterChefContract = (provider) => {\r\n  const web3 = new Web3(provider);\r\n  const masterchefContract = new web3.eth.Contract(\r\n    masterChefABI,\r\n    \"0x9da687e88b0A807e57f1913bCD31D56c49C872c2\"\r\n  );\r\n  return { web3, masterchefContract };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Button, InputNumber } from \"antd\";\r\n\r\nconst CustomModal = ({\r\n  isModalVisible,\r\n  handleCancel,\r\n  title,\r\n  handleAction,\r\n  loading,\r\n  modalInfoName,\r\n  modalInfoValue,\r\n}) => {\r\n  const [amount, setAmount] = useState(0);\r\n\r\n  const handleTransaction = async () => {\r\n    await handleAction(amount);\r\n    setAmount(0);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      footer={null}\r\n      cancelButtonProps={false}\r\n      title={title}\r\n      visible={isModalVisible}\r\n      onCancel={handleCancel}\r\n    >\r\n      <div className=\"custom__modal\">\r\n        <InputNumber\r\n          controls={false}\r\n          value={amount}\r\n          size=\"large\"\r\n          style={{ marginBottom: \"30px\", width: \"100%\" }}\r\n          onChange={(value) => setAmount(value)}\r\n        />\r\n        <div class=\"modal__info\">\r\n          <strong>{modalInfoName}: </strong>\r\n          <span>{modalInfoValue}</span>\r\n        </div>\r\n        <Button\r\n          type=\"primary\"\r\n          size=\"large\"\r\n          onClick={handleTransaction}\r\n          loading={loading}\r\n        >\r\n          {title}\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import { InjectedConnector } from \"@web3-react/injected-connector\";\r\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\r\n\r\nconst WALLETCONNECT_BRIDGE_URL = \"https://bridge.walletconnect.org\";\r\n\r\nconst NETWORK_URLS = {\r\n  1: `https://mainnet.infura.io/v3/859af0ec9b7d4b598e8da5f0c835c027`,\r\n  4: `https://rinkeby.infura.io/v3/859af0ec9b7d4b598e8da5f0c835c027`,\r\n  5: `https://goerli.infura.io/v3/859af0ec9b7d4b598e8da5f0c835c027`,\r\n};\r\n\r\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 4, 5] });\r\n\r\nexport const walletConnectConnector = new WalletConnectConnector({\r\n  supportedChainIds: [1, 4, 5],\r\n  rpc: NETWORK_URLS,\r\n  bridge: WALLETCONNECT_BRIDGE_URL,\r\n  qrcode: true,\r\n});\r\n","import metaMask from '../assets/ico_metamask.svg';\r\nimport walletConnect from '../assets/ico_connectwallet.svg';\r\n\r\nexport const icons = {\r\n   metaMask,\r\n   walletConnect\r\n}","export default __webpack_public_path__ + \"static/media/ico_metamask.3ccfb050.svg\";","export default __webpack_public_path__ + \"static/media/ico_connectwallet.23917f6f.svg\";","export const TIME_DURATION = 7;\r\nexport const MASTERCHEF_SC = \"0x9da687e88b0A807e57f1913bCD31D56c49C872c2\";\r\nexport const WETH_SC = \"0xc778417e063141139fce010982780140aa0cd5ab\";\r\n","export const EllipsisMiddle = (account) => {\r\n  return account ? account.slice(0, 6) + \"...\" + account.slice(-6) : \"\";\r\n};\r\n","import { Table } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst HistoryTable = ({ history }) => {   \r\n   const data = history.map(rec => {\r\n      return {\r\n         key: rec.id,\r\n         action: rec.action,\r\n         amount: rec.amount,\r\n         time: rec.time\r\n      }\r\n   });\r\n\r\n   console.log('data', data);\r\n   const columns = [\r\n      {\r\n         title: 'Action',\r\n         dataIndex: 'action',\r\n         key: 'action',\r\n      },\r\n      {\r\n         title: 'Amount',\r\n         dataIndex: 'amount',\r\n         key: 'amount',\r\n      },\r\n      {\r\n         title: 'Time',\r\n         dataIndex: 'time',\r\n         key: 'time',\r\n      },\r\n   ];\r\n  return <Table columns={columns} dataSource={data}/>;\r\n};\r\n\r\nexport default HistoryTable;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable jsx-a11y/alt-text */\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Button, Card, Col, Descriptions, message, Row, Statistic } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { getWethContract, getMasterChefContract } from \"./abi/contract\";\nimport \"./App.css\";\nimport CustomModal from \"./components/Modal\";\nimport { injected, walletConnectConnector } from \"./config/wallets\";\nimport { icons } from \"./themes/icon\";\nimport { MASTERCHEF_SC, TIME_DURATION, WETH_SC } from \"./utils/constant\";\nimport { EllipsisMiddle } from \"./utils/functions\";\nimport wethABI from \"./abi/WETH.json\";\nimport masterChefABI from \"./abi/Masterchef.json\";\nimport { Multicall } from \"ethereum-multicall\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { ethers } from \"ethers\";\nimport moment from 'moment';\nimport axios from \"axios\";\nimport HistoryTable from \"./components/HistoryTable\";\n\nconst endpoint =\n  \"https://api.thegraph.com/subgraphs/name/sotatek-daipham/web3final\";\nconst headers = {\n  \"content-type\": \"application/json\",\n};\n\nfunction App() {\n  const { activate, account, chainId, library } = useWeb3React();\n  const [loadingButton, setLoadingButton] = useState(false);\n  const [loadingHarvest, setLoadingHarvest] = useState(false);\n  const [loadingApprove, setLoadingApprove] = useState(false);\n  const [stakeModal, setStakeModal] = useState(false);\n  const [withdrawModal, setWithdrawModal] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const [yourStake, setYourStake] = useState(0);\n  const [tokenEarned, setTokenEarned] = useState(0);\n  const [totalStaked, setTotalStaked] = useState(0);\n  const [isApprove, setApprove] = useState(0);\n  const [historyData, setHistoryData] = useState([]);\n  const web3 = new Web3(library?.provider);\n  const multicall = new Multicall({\n    web3Instance: web3,\n    tryAggregate: true,\n  });\n\n    // Fetch data from subgraph\n  const fetchHistory = async (account) => {\n    try {\n      const response = await axios({\n        url: endpoint,\n        method: \"POST\",\n        headers: headers,\n        data: {\n        \"query\": `\n          {depositEntities(orderBy: time, orderDirection:desc, first: 5, where:{\n            user: \"${account}\"\n            }) {\n              id\n              time\n              user\n              amount\n            }\n          withdrawEntities(orderBy: time, orderDirection:desc, first: 5, where:{\n                user: \"${account}\"\n          }) {\n            id\n            time\n            user\n            amount\n          }}`,\n          \"variables\": null,\n        },\n      });\n\n      const depositHistory = response.data.data.depositEntities;\n      \n      const historyResponse = [...response.data.data.depositEntities, ...response.data.data.withdrawEntities];\n\n      \n      const sortHistoryByTime = historyResponse.sort(function(x, y){\n        return x.time - y.time;\n      }).reverse()\n\n      const historyData = sortHistoryByTime.map(rec => {\n        return {\n          id: rec.id,\n          action: depositHistory.find(item => item.id === rec.id) ? \"Deposit\" : \"Withdraw\",\n          amount: web3.utils.fromWei(rec.amount),\n          time: moment.unix(rec.time).format(\"HH:mm:ss DD-MM-YYYY\"),\n        }\n      })\n      setHistoryData(historyData);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  const contractCallContext = [\n    {\n      reference: \"userBalance\",\n      contractAddress: WETH_SC,\n      abi: wethABI,\n      calls: [\n        {\n          reference: \"balance\",\n          methodName: \"balanceOf\",\n          methodParameters: [account],\n        },\n      ],\n    },\n    {\n      reference: \"userStake\",\n      contractAddress: MASTERCHEF_SC,\n      abi: masterChefABI,\n      calls: [\n        {\n          reference: \"userStake\",\n          methodName: \"userInfo\",\n          methodParameters: [account],\n        },\n      ],\n    },\n    {\n      reference: \"tokenEarned\",\n      contractAddress: MASTERCHEF_SC,\n      abi: masterChefABI,\n      calls: [\n        {\n          reference: \"tokenEarned\",\n          methodName: \"pendingDD2\",\n          methodParameters: [account],\n        },\n      ],\n    },\n    {\n      reference: \"totalStaked\",\n      contractAddress: WETH_SC,\n      abi: wethABI,\n      calls: [\n        {\n          reference: \"totalStaked\",\n          methodName: \"balanceOf\",\n          methodParameters: [MASTERCHEF_SC],\n        },\n      ],\n    },\n  ];\n\n  //get data with multicall\n  const getMulticalData = async () => {\n    try {\n      const results = await multicall.call(contractCallContext);\n      setBalance(\n        ethers.utils.formatEther(\n          BigNumber.from(\n            results.results.userBalance.callsReturnContext[0].returnValues[0]\n              .hex\n          )\n        )\n      );\n      setYourStake(\n        ethers.utils.formatEther(\n          BigNumber.from(\n            results.results.userStake.callsReturnContext[0].returnValues[0].hex\n          )\n        )\n      );\n      setTokenEarned(\n        ethers.utils.formatEther(\n          BigNumber.from(\n            results.results.tokenEarned.callsReturnContext[0].returnValues[0]\n              .hex\n          )\n        )\n      );\n      setTotalStaked(\n        ethers.utils.formatEther(\n          BigNumber.from(\n            results.results.totalStaked.callsReturnContext[0].returnValues[0]\n              .hex\n          )\n        )\n      );\n      console.log(results);\n    } catch (error) {\n      console.log(\n        \"🚀 ~ file: App.js ~ line 50 ~ getMulticalData ~ error\",\n        error\n      );\n    }\n  };\n\n  const connectInjectedConnector = () => {\n    activate(injected);\n  };\n\n  const connectWalletConnectConnector = () => {\n    activate(walletConnectConnector, undefined, true).catch((e) =>\n      console.log(\"error\", e)\n    );\n  };\n\n  const handleCloseStakeModal = () => {\n    setStakeModal(false);\n  };\n\n  const handleCloseWithdrawModal = () => {\n    setWithdrawModal(false);\n  };\n\n  const handleOpenStakeModal = () => {\n    setStakeModal(true);\n  };\n\n  const handleOpenWithdrawModal = () => {\n    setWithdrawModal(true);\n  };\n\n  const checkAllowance = async () => {\n    const { wethContract } = getWethContract(library.provider);\n    const isAllowance = await wethContract.methods\n      .allowance(account, MASTERCHEF_SC)\n      .call();\n    setApprove(isAllowance);\n  };\n\n  // Approve\n  const handleApprove = async () => {\n    const { web3, wethContract } = getWethContract(library.provider);\n    \n    if(parseFloat(balance) === 0) {\n      message.error({\n        content: \"Insufficient WETH balance\",\n        duration: TIME_DURATION,\n      });\n\n      return;\n    }\n   \n    if(account) {\n      try {\n        setLoadingApprove(true);\n        await wethContract.methods\n          .approve(MASTERCHEF_SC, web3.utils.toWei(balance))\n          .send({ from: account });\n\n        checkAllowance();\n        setLoadingApprove(false);\n      } catch (error) {\n        setLoadingApprove(false);\n        console.log(error);\n      }\n    }\n\n  };\n  \n  // Deposit\n  const handleDeposit = async (amount) => {\n    const { web3, masterchefContract } = getMasterChefContract(\n      library.provider\n    );\n\n    if (amount > parseFloat(balance)) {\n      message.error({\n        content: \"Insufficient funds\",\n        duration: TIME_DURATION,\n      });\n    } else if (account) {\n      try {\n        setLoadingButton(true);\n        const depositRes = await masterchefContract.methods\n          .deposit(web3.utils.toWei(amount.toString()))\n          .send({ from: account });\n\n        if (depositRes) {\n          message.success({\n            content: \"Transaction Success\",\n            duration: TIME_DURATION,\n          });\n          handleCloseStakeModal();\n          getStaticInfo();\n          setLoadingButton(false);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  //Withdraw\n  const handleWithdraw = async (amount) => {\n    const { web3, masterchefContract } = getMasterChefContract(\n      library.provider\n    );\n\n    if (amount > parseFloat(yourStake)) {\n      message.error({\n        content: \"Insufficient funds\",\n        duration: TIME_DURATION,\n      });\n    } else if (account) {\n      try {\n        setLoadingButton(true);\n        const depositRes = await masterchefContract.methods\n          .withdraw(web3.utils.toWei(amount.toString()))\n          .send({ from: account });\n\n        if (depositRes) {\n          message.success({\n            content: \"Transaction Success\",\n            duration: TIME_DURATION,\n          });\n          handleCloseStakeModal();\n          getStaticInfo();\n          setLoadingButton(false);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  // Harvest\n  const handleHarvest = async () => {\n    const { masterchefContract } = getMasterChefContract(library.provider);\n\n    try {\n      setLoadingHarvest(true);\n      const depositRes = await masterchefContract.methods\n        .deposit(0)\n        .send({ from: account });\n\n      if (depositRes) {\n        message.success({\n          content: \"Transaction Success\",\n          duration: TIME_DURATION,\n        });\n        handleCloseStakeModal();\n        getStaticInfo();\n        setLoadingHarvest(false);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getStaticInfo = async () => {\n    await getMulticalData();\n    await fetchHistory(account);\n  };\n\n  useEffect(() => {\n    if (account && library) {\n      getStaticInfo();\n      checkAllowance();\n    }\n  }, [account, library]);\n\n  const renderConnectWallet = () => {\n    return (\n      <div className=\"connect__wallet\">\n        <div\n          className=\"connect__wallet__option\"\n          onClick={connectInjectedConnector}\n        >\n          <img src={icons.metaMask} />\n          <span>Connect Metamask</span>\n        </div>\n        <br />\n        <div\n          className=\"connect__wallet__option\"\n          onClick={connectWalletConnectConnector}\n        >\n          <img src={icons.walletConnect} />\n          <span>Wallet Connect</span>\n        </div>\n      </div>\n    );\n  };\n\n  const renderStake = () => {\n    return (\n      <div className=\"stake__container\">\n        <Row gutter={16}>\n          <Col span={12}>\n            <Card bordered={true}>\n              <Descriptions\n                title=\"Stake Detail\"\n                bordered\n                size=\"middle\"\n                column={2}\n              >\n                <Descriptions.Item label=\"Wallet Address\">\n                  {account && EllipsisMiddle(account)}\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Balance\">\n                  {balance && balance} <strong>WETH</strong>\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Token Earned\">\n                  {tokenEarned} <strong>DD2</strong>\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Your Stake\">\n                  {yourStake} <strong>WETH</strong>\n                </Descriptions.Item>\n                <Descriptions.Item label=\"Total Staked\">\n                  {totalStaked} <strong>WETH</strong>\n                </Descriptions.Item>\n                <Descriptions.Item>\n                  <Button\n                    type=\"primary\"\n                    block\n                    onClick={handleHarvest}\n                    loading={loadingHarvest}\n                  >\n                    Harvest\n                  </Button>\n                </Descriptions.Item>\n              </Descriptions>\n              <div className=\"stake__action\">\n                {parseFloat(isApprove) ? (\n                  <>\n                    <Button onClick={handleOpenStakeModal} className=\"deposit\">\n                      Deposit\n                    </Button>\n                    <Button\n                      onClick={handleOpenWithdrawModal}\n                      className=\"withdraw\"\n                    >\n                      Withdraw\n                    </Button>\n                  </>\n                ) : (\n                  <Button loading={loadingApprove} onClick={handleApprove} className=\"approve\">\n                    Approve\n                  </Button>\n                )}\n              </div>\n              <CustomModal\n                title={\"Stake\"}\n                isModalVisible={stakeModal}\n                handleCancel={handleCloseStakeModal}\n                handleAction={handleDeposit}\n                loading={loadingButton}\n                modalInfoName={\"Your WETH balance\"}\n                modalInfoValue={balance}\n              />\n              <CustomModal\n                title={\"Withdraw\"}\n                isModalVisible={withdrawModal}\n                handleCancel={handleCloseWithdrawModal}\n                handleAction={handleWithdraw}\n                loading={loadingButton}\n                modalInfoName={\"Your WETH deposited\"}\n                modalInfoValue={yourStake}\n              />\n            </Card>\n          </Col>\n          <Col span={12}>\n            <Card title=\"History of Account\" bordered={true}>\n              <HistoryTable history={historyData}/>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {!account ? renderConnectWallet() : renderStake()}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport { createWeb3ReactRoot, Web3ReactProvider } from '@web3-react/core';\nimport { Web3Provider } from '@ethersproject/providers';\n\nfunction getLibrary(provider, connector) {\n  const library = new Web3Provider(provider);\n  return library;\n}\n\nconst Web3ProviderNetwork = createWeb3ReactRoot('NETWORK');\n\nReactDOM.render(\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Web3ProviderNetwork getLibrary={getLibrary}>\n        <App />\n      </Web3ProviderNetwork>\n    </Web3ReactProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}